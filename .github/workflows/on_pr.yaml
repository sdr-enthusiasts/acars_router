---
name: Pull Request

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
  # Build and test deployment the image on pushes to main branch
  pull_request:
    # Only publish on push to main branch
    branches:
      - main
    # Only run if the PR yaml has changed or a Dockerfile has changed
    paths:
      - Dockerfile**
      - "**on_pr.yml"
      - "**.py"

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    name: "Linting: flake8"
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "E501"
  hadolint:
    name: "Linting: hadolint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3013 --ignore DL3008 $(find . -type f -iname "Dockerfile*")

  test_functionality:
    name: "Test Functionality"
    runs-on: ubuntu-latest
    needs: flake8-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y socat netcat
          sudo python3 -m pip install -r ./acars_router/requirements.txt
      - name: "ACARS: Patch test file timestamps"
        run: |
          jq -cM ".timestamp = \"$(date +%s.%N)\"" < ./test_data/acars > ./test_data/acars.patched
          cat ./test_data/acars.patched

      - name: "ACARS: Test UDP Listen -> UDP Send"
        run: ./test_data/test_udp.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "ACARS: Test TCP Listen -> TCP Send"
        run: ./test_data/test_tcplisten_tcpsend.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "ACARS: Test TCP Receive -> TCP Serve"
        run: ./test_data/test_tcpreceive_tcpserve.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      # TODO: Fix this test
      # - name: "ACARS: Test UDP Listen -> ZMQ Serve"
      #   run: ./test_data/test_udp_zmqserver.sh acars
      # - name: Clean up between tests
      #   run: ./test_data/clean_up_after_test.sh acars

      - name: "VDLM2: Patch test file timestamps"
        run: |
          jq -cM ".vdl2.t.sec = $(date +%s)" < ./test_data/vdlm2 > ./test_data/vdlm2.patched
          cat ./test_data/vdlm2.patched

      - name: "VDLM2: Test UDP Listen -> UDP Send"
        run: ./test_data/test_udp.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "VDLM2: Test TCP Listen -> TCP Send"
        run: ./test_data/test_tcplisten_tcpsend.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "VDLM2: Test TCP Receive -> TCP Serve"
        run: ./test_data/test_tcpreceive_tcpserve.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      # TODO: Fix this test
      # - name: "VDLM2: Test UDP Listen -> ZMQ Serve"
      #   run: ./test_data/test_udp_zmqserver.sh vdlm2
      # - name: Clean up between tests
      #   run: ./test_data/clean_up_after_test.sh vdlm2

  test_build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: [hadolint, flake8-lint]
    strategy:
      matrix:
        docker-platform:
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
          - linux/i386
    steps:

      # Check out our code
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # List of files to check to trigger a rebuild on this job
      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v19
        with:
          files: |
            Dockerfile
            acars_router
            !*.md
            !*.MD

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/setup-qemu-action@v2

      # Set up buildx for multi platform builds
      - name: Set up Docker Buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v2

      # Build
      - name: Test Build
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          no-cache: true
          platforms: ${{ matrix.docker-platform }}
          push: false

      # # Patch dockerfile to remove healthcheck
      # - name: Patch Dockerfile to remove healthcheck
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # # Build nohealthcheck
      # - name: Test Build nohealthcheck
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ./Dockerfile.nohealthcheck
      #     no-cache: true
      #     platforms: ${{ matrix.docker-platform }}
      #     push: false
