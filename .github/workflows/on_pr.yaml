---
name: Pull Request

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
  # Build and test deployment the image on pushes to main branch
  pull_request:
    # Only publish on push to main branch
    branches:
      - main
    # Only run if the PR yaml, Dockerfile, sh, py or rs files have changed
    paths:
      - Dockerfile**
      - "**on_pr.yml"
      - "**.py"
      - "**.rs"
      - "**.sh"

jobs:
  
  hadolint:
    name: "Linting: hadolint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3013 --ignore DL3008 $(find . -type f -iname "Dockerfile*")

  # test_rust_functionality:
  #   name: Build and test rust functionality
  #   runs-on: ubuntu-latest
  #   needs: flake8-lint
  #   env:
  #     ACARS_ROUTER_PATH: "../target/release/acars_router"

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Install Rust and deps
  #       run: |
  #         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #         sudo apt-get update
  #         sudo apt-get install -y --no-install-recommends libzmq3-dev
  #         python3 -m pip install zmq

  #     - name: Build acars_router
  #       run: |
  #         cargo build --release
  #     - name: Run tests
  #       run: |
  #         cd test_data
  #         ./run_acars_ruster_test.sh

  test_functionality:
    name: "Test Functionality"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y socat netcat
          sudo python3 -m pip install -r ./acars_router/requirements.txt
      - name: "ACARS: Patch test file timestamps"
        run: |
          jq -cM ".timestamp = \"$(date +%s.%N)\"" < ./test_data/acars > ./test_data/acars.patched
          cat ./test_data/acars.patched

      - name: "ACARS: Test UDP Listen -> UDP Send"
        run: ./test_data/test_udp.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "ACARS: Test TCP Listen -> TCP Send"
        run: ./test_data/test_tcplisten_tcpsend.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "ACARS: Test TCP Receive -> TCP Serve"
        run: ./test_data/test_tcpreceive_tcpserve.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      # TODO: Fix this test
      # - name: "ACARS: Test UDP Listen -> ZMQ Serve"
      #   run: ./test_data/test_udp_zmqserver.sh acars
      # - name: Clean up between tests
      #   run: ./test_data/clean_up_after_test.sh acars

      - name: "VDLM2: Patch test file timestamps"
        run: |
          jq -cM ".vdl2.t.sec = $(date +%s)" < ./test_data/vdlm2 > ./test_data/vdlm2.patched
          cat ./test_data/vdlm2.patched

      - name: "VDLM2: Test UDP Listen -> UDP Send"
        run: ./test_data/test_udp.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "VDLM2: Test TCP Listen -> TCP Send"
        run: ./test_data/test_tcplisten_tcpsend.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "VDLM2: Test TCP Receive -> TCP Serve"
        run: ./test_data/test_tcpreceive_tcpserve.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      # TODO: Fix this test
      # - name: "VDLM2: Test UDP Listen -> ZMQ Serve"
      #   run: ./test_data/test_udp_zmqserver.sh vdlm2
      # - name: Clean up between tests
      #   run: ./test_data/clean_up_after_test.sh vdlm2

  binary_build:
    name: Build Binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Install OS dependencies: armhf"
        uses: ryankurte/action-apt@v0.3.0
        with:
          arch: armhf
          packages: "libzmq3-dev:armhf"

      - name: "Install OS dependencies: arm64"
        uses: ryankurte/action-apt@v0.3.0
        with:
          arch: arm64
          packages: "libzmq3-dev:arm64"

      # i386 currently does not work...
      # - name: "Install OS dependencies: i386"
      #   uses: ryankurte/action-apt@v0.3.0
      #   with:
      #     arch: i386
      #     packages: "libzmq3-dev:i386"

      - name: "Install OS dependencies: arm64"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libzmq3-dev

      - name: "Install rust targets/toolchains for cross build"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            g++-arm-linux-gnueabihf \
            libc6-dev-armhf-cross \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross

          rustup target add armv7-unknown-linux-gnueabihf
          rustup toolchain install stable-armv7-unknown-linux-gnueabihf
          rustup target add aarch64-unknown-linux-gnu
          rustup toolchain install stable-aarch64-unknown-linux-gnu
          rustup target add x86_64-unknown-linux-gnu
          rustup toolchain install stable-x86_64-unknown-linux-gnu

      - name: Build armv7
        run: |
          PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf RUSTFLAGS="-C linker=/usr/bin/arm-linux-gnueabihf-gcc" cargo build --release --target armv7-unknown-linux-gnueabihf

      - name: Build arm64
        run: |
          PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu RUSTFLAGS="-C linker=/usr/bin/aarch64-linux-gnu-gcc" cargo build --release --target aarch64-unknown-linux-gnu
      
      - name: Build amd64
        run: |
          cargo build --release

      - name: Upload artifact amd64 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router_amd64
          path: target/release/acars_router

      - name: Upload artifact armv7 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router_armv7
          path: target/armv7-unknown-linux-gnueabihf/release/acars_router

      - name: Upload artifact arm64 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router_arm64
          path: target/aarch64-unknown-linux-gnu/release/acars_router

      - name: Cache Cargo Build Output
        uses: actions/cache@v3
        with:
          path: target/
          key: ${{ github.run_id }}

      # # Allows troubleshooting via SSH
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     limit-access-to-users: mikenye

      # TEST RELEASES - WILL MOVE TO DEPLOY.YAML WHEN READY
      - name: Prepare release
        id: prepare_release
        run: |
          # Make release tarballs
          mkdir -vp ./release
          pushd ./target/release
          tar cJvf ./release/acars_router.amd64.tar.xz ./acars_router
          popd
          pushd ./target/armv7-unknown-linux-gnueabihf/release
          tar cJvf ./release/acars_router.armv7.tar.xz ./acars_router
          popd
          pushd ./target/aarch64-unknown-linux-gnu/release
          tar cJvf ./release/acars_router.arm64.tar.xz ./acars_router
          popd
          # Get version from Cargo.toml
          RELEASE_VERSION=$(cat Cargo.toml | grep '\[package\]' -A9999 | grep -m 1 'version = ' | tr -d " " | tr -d '"' | tr -d "'" | cut -d = -f 2)
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"
          
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ./release/*.tar.xz
          token: ${{ secrets.YOUR_GITHUB_TOKEN }}
          name: ${{ steps.prepare_release.outputs.RELEASE_VERSION }}

  test_docker_image_build:
    name: Test Docker Image Build
    needs: [hadolint, binary_build]
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/build_and_push_image.yml@main
    with:
      get_version_method: cargo_toml_file_in_repo:file=/Cargo.toml
      build_with_tmpfs: true
      build_nohealthcheck: false
      cache_enabled: true
      cache_path: target/
      cache_key: ${{ github.run_id }}

    # strategy:
    #   matrix:
    #     docker-platform:
    #       - linux/amd64
    #       - linux/arm64
    #       # - linux/arm/v6
    #       - linux/arm/v7
    #       - linux/i386
    # steps:
    #   # Check out our code
    #   - name: Checkout
    #     uses: actions/checkout@v3
    #     with:
    #       fetch-depth: 0

    #   # List of files to check to trigger a rebuild on this job
    #   - name: Get specific changed files
    #     id: changed-files-specific
    #     uses: tj-actions/changed-files@v23.2
    #     with:
    #       files: |
    #         Dockerfile
    #         acars_router
    #         !*.md
    #         !*.MD

    #   # https://github.com/marketplace/actions/docker-on-tmpfs
    #   # https://github.com/rust-lang/cargo/issues/8719
    #   # https://github.com/rust-lang/cargo/issues/9545



      # - name: Run Docker on tmpfs
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   uses: JonasAlfredsson/docker-on-tmpfs@v1
      #   with:
      #     tmpfs_size: 5
      #     swap_size: 4
      #     swap_location: "/mnt/swapfile"

      # # Set up QEMU for multi-arch builds
      # - name: Set up QEMU
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   uses: docker/setup-qemu-action@v2

      # # Set up buildx for multi platform builds
      # - name: Set up Docker Buildx
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2

      # # Build
      # - name: Test Build
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     no-cache: true
      #     platforms: ${{ matrix.docker-platform }}
      #     push: false

      # # Patch dockerfile to remove healthcheck
      # - name: Patch Dockerfile to remove healthcheck
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   run: sed '/^HEALTHCHECK /d' < Dockerfile > Dockerfile.nohealthcheck

      # # Build nohealthcheck
      # - name: Test Build nohealthcheck
      #   if: steps.changed-files-specific.outputs.any_changed == 'true'
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ./Dockerfile.nohealthcheck
      #     no-cache: true
      #     platforms: ${{ matrix.docker-platform }}
      #     push: false
