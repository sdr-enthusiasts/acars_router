---
name: Pull Request

on:
  # Enable manual running of action if necessary
  workflow_dispatch:
  # Build and test deployment the image on pushes to main branch
  pull_request:
    # # Only publish on push to main branch
    # branches:
    #   - main
    # Only run if the PR yaml, Dockerfile, sh, py or rs files have changed
    paths:
      - Dockerfile**
      - "**on_pr.yaml"
      - "**.py"
      - "**.rs"
      - "**.sh"
      - "**.toml"

jobs:
  hadolint:
    name: "Linting: hadolint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.1.0
      - name: Pull hadolint/hadolint:latest Image
        run: docker pull hadolint/hadolint:latest
      - name: Run hadolint against Dockerfiles
        run: docker run --rm -i -v "$PWD":/workdir --workdir /workdir --entrypoint hadolint hadolint/hadolint --ignore DL3013 --ignore DL3008 $(find . -type f -iname "Dockerfile*")

  test_rust_functionality:
    name: Build and test rust functionality
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - name: Install Rust and deps
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libzmq3-dev
          python3 -m pip install zmq

      - name: Get binary version from Cargo.toml
        id: release_version
        run: |
          # Get version from Cargo.toml
          RELEASE_VERSION=$(cat ./rust/bin/acars_router/Cargo.toml | grep '\[package\]' -A9999 | grep -m 1 'version = ' | tr -d " " | tr -d '"' | tr -d "'" | cut -d = -f 2)
          echo "$RELEASE_VERSION"

      - name: Run tests
        run: |
          cd test_data
          ./run_acars_ruster_test.sh

  test_functionality:
    name: "Test Functionality"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0
      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y socat netcat
          sudo python3 -m pip install -r ./acars_router/requirements.txt
      - name: "ACARS: Patch test file timestamps"
        run: |
          jq -cM ".timestamp = \"$(date +%s.%N)\"" < ./test_data/acars > ./test_data/acars.patched
          cat ./test_data/acars.patched

      - name: "ACARS: Test UDP Listen -> UDP Send"
        run: ./test_data/test_udp.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "ACARS: Test TCP Listen -> TCP Send"
        run: ./test_data/test_tcplisten_tcpsend.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "ACARS: Test TCP Receive -> TCP Serve"
        run: ./test_data/test_tcpreceive_tcpserve.sh acars
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      # TODO: Fix this test
      # - name: "ACARS: Test UDP Listen -> ZMQ Serve"
      #   run: ./test_data/test_udp_zmqserver.sh acars
      # - name: Clean up between tests
      #   run: ./test_data/clean_up_after_test.sh acars

      - name: "VDLM2: Patch test file timestamps"
        run: |
          jq -cM ".vdl2.t.sec = $(date +%s)" < ./test_data/vdlm2 > ./test_data/vdlm2.patched
          cat ./test_data/vdlm2.patched

      - name: "VDLM2: Test UDP Listen -> UDP Send"
        run: ./test_data/test_udp.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "VDLM2: Test TCP Listen -> TCP Send"
        run: ./test_data/test_tcplisten_tcpsend.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      - name: "VDLM2: Test TCP Receive -> TCP Serve"
        run: ./test_data/test_tcpreceive_tcpserve.sh vdlm2
      - name: Clean up between tests
        run: ./test_data/clean_up_after_test.sh

      # TODO: Fix this test
      # - name: "VDLM2: Test UDP Listen -> ZMQ Serve"
      #   run: ./test_data/test_udp_zmqserver.sh vdlm2
      # - name: Clean up between tests
      #   run: ./test_data/clean_up_after_test.sh vdlm2

  # binary_build_armv7:
  #   name: Build Binary - armv7
  #   runs-on: ubuntu-latest
  #   # needs: test_rust_functionality

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         fetch-depth: 0

  #     - name: Run Docker on tmpfs
  #       uses: JonasAlfredsson/docker-on-tmpfs@v1
  #       with:
  #         tmpfs_size: 5
  #         swap_size: 4
  #         swap_location: "/mnt/swapfile"

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build armv7
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: false
  #         file: Dockerfile.build_binary
  #         tags: acars_router:armv7
  #         platforms: linux/arm/v7
  #         outputs: type=local,dest=./image_armv7/

  #     - name: Upload artifact armv7 binary
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: acars_router.armv7
  #         path: ./image_armv7/acars_router

  # binary_build_arm64:
  #   name: Build Binary - arm64
  #   runs-on: ubuntu-latest
  #   # needs: test_rust_functionality

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3.1.0
  #       with:
  #         fetch-depth: 0

  #     - name: Run Docker on tmpfs
  #       uses: JonasAlfredsson/docker-on-tmpfs@v1
  #       with:
  #         tmpfs_size: 5
  #         swap_size: 4
  #         swap_location: "/mnt/swapfile"

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build arm64
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: false
  #         file: Dockerfile.build_binary
  #         tags: acars_router:arm64
  #         platforms: linux/arm64
  #         outputs: type=local,dest=./image_arm64/

  #     - name: Upload artifact arm64 binary
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: acars_router.arm64
  #         path: ./image_arm64/acars_router

  binary_build_amd64:
    name: Build Binary - amd64
    runs-on: ubuntu-latest
    # needs: test_rust_functionality

    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - name: Run Docker on tmpfs
        uses: JonasAlfredsson/docker-on-tmpfs@v1
        with:
          tmpfs_size: 5
          swap_size: 4
          swap_location: "/mnt/swapfile"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build amd64
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          file: Dockerfile.build_binary
          tags: acars_router:amd64
          platforms: linux/amd64
          outputs: type=local,dest=./image_amd64/

      - name: Upload artifact amd64 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router.amd64
          path: ./image_amd64/acars_router

  consolidate_binaries:
    name: Consolidate & Cache Binaries
    runs-on: ubuntu-latest
    #needs: [binary_build_amd64, binary_build_arm64, binary_build_armv7]
    needs: [binary_build_amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@master
        with:
          name: acars_router.amd64

      # - uses: actions/download-artifact@master
      #   with:
      #     name: acars_router.armv7
      #     path: ./bin/acars_router.armv7

      # - uses: actions/download-artifact@master
      #   with:
      #     name: acars_router.arm64
      #     path: ./bin/acars_router.arm64

      - run: ls -la /

      - name: Cache Binaries
        uses: actions/cache@v3
        with:
          key: ${{ github.run_id }}

  test_docker_image_build:
    name: Test Docker Image Build
    needs: [hadolint, consolidate_binaries, test_functionality]
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/build_and_push_image.yml@main
    with:
      get_version_method: cargo_toml_file_in_repo:file=/Cargo.toml
      build_with_tmpfs: true
      build_nohealthcheck: false
      cache_enabled: true
      # cache_path: ./bin/
      cache_key: ${{ github.run_id }}
