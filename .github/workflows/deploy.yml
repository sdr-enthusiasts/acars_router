---
name: Deploy

on:
  workflow_dispatch:
    inputs:
      reason:
        required: true
        description: "Reason for running this workflow"
  push:
    branches:
      - main

    # Don't trigger if it's just a documentation update
    paths-ignore:
      - "**.md"
      - "**.MD"
      - "**.yml"
      - "**.yaml"
      - "LICENSE"
      - ".gitattributes"
      - ".gitignore"
      - ".dockerignore"

jobs:
  workflow-dispatch:
    name: Workflow Dispatch
    # only run this step if workflow dispatch triggered
    # log the reason the workflow dispatch was triggered
    if: |
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.reason != ''
    runs-on: ubuntu-latest
    steps:
      - name: Log dispatch reason
        env:
          INPUTS_REASON: ${{ github.event.inputs.reason }}
        run: |
          echo "Workflow dispatch reason: $INPUTS_REASON"
          echo "::notice title=${{ github.job }}: Workflow Dispatch Reason::${INPUTS_REASON}"

  binary_build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - name: "Install OS dependencies: armhf"
        uses: ryankurte/action-apt@v0.3.0
        with:
          arch: armhf
          packages: "libzmq3-dev:armhf"

      - name: "Install OS dependencies: arm64"
        uses: ryankurte/action-apt@v0.3.0
        with:
          arch: arm64
          packages: "libzmq3-dev:arm64"

      # i386 currently does not work...
      # - name: "Install OS dependencies: i386"
      #   uses: ryankurte/action-apt@v0.3.0
      #   with:
      #     arch: i386
      #     packages: "libzmq3-dev:i386"

      - name: "Install OS dependencies: arm64"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libzmq3-dev

      - name: "Install rust targets/toolchains for cross build"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            g++-arm-linux-gnueabihf \
            libc6-dev-armhf-cross \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross

          rustup target add armv7-unknown-linux-gnueabihf
          rustup toolchain install stable-armv7-unknown-linux-gnueabihf
          rustup target add aarch64-unknown-linux-gnu
          rustup toolchain install stable-aarch64-unknown-linux-gnu
          rustup target add x86_64-unknown-linux-gnu
          rustup toolchain install stable-x86_64-unknown-linux-gnu

      - name: Build armv7
        run: |
          PKG_CONFIG_SYSROOT_DIR=/usr/arm-linux-gnueabihf RUSTFLAGS="-C linker=/usr/bin/arm-linux-gnueabihf-gcc" cargo build --release --target armv7-unknown-linux-gnueabihf

      - name: Build arm64
        run: |
          PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu RUSTFLAGS="-C linker=/usr/bin/aarch64-linux-gnu-gcc" cargo build --release --target aarch64-unknown-linux-gnu

      - name: Build amd64
        run: |
          cargo build --release

      - name: Consolidate binaries
        run: |
          mkdir -p ./bin
          cp -v ./target/release/acars_router ./bin/acars_router.amd64
          cp -v ./target/armv7-unknown-linux-gnueabihf/release/acars_router ./bin/acars_router.armv7
          cp -v ./target/aarch64-unknown-linux-gnu/release/acars_router ./bin/acars_router.arm64

      - name: Upload artifact amd64 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router.amd64
          path: ./bin/acars_router.amd64

      - name: Upload artifact armv7 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router.armv7
          path: ./bin/acars_router.armv7

      - name: Upload artifact arm64 binary
        uses: actions/upload-artifact@v3
        with:
          name: acars_router.arm64
          path: ./bin/acars_router.arm64

      - name: Cache Cargo Build Output
        uses: actions/cache@v3
        with:
          path: bin/
          key: ${{ github.run_id }}

      # # Allows troubleshooting via SSH
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     limit-access-to-users: mikenye

  release_binaries:
    name: Release Binaries
    needs: [binary_build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - name: Cache cargo build output
        id: get_cache
        uses: actions/cache@v3
        with:
          path: bin/
          key: ${{ github.run_id }}

      - name: Check cache
        if: steps.get_cache.outputs.cache-hit != 'true'
        run: |
          echo "::error title=${{ github.job }}: Could not get binaries from action cache"
          exit 1

      - name: Prepare binary release tarballs
        if: steps.get_cache.outputs.cache-hit == 'true'
        run: |
          ORIGDIR=$(pwd)
          # Make release tarballs
          mkdir -vp ./release
          pushd ./bin
          tar cJvf "$ORIGDIR/release/acars_router.amd64.tar.xz" ./acars_router.amd64
          tar cJvf "$ORIGDIR/release/acars_router.armv7.tar.xz" ./acars_router.armv7
          tar cJvf "$ORIGDIR/release/acars_router.arm64.tar.xz" ./acars_router.arm64
          popd

      - name: Get binary version from Cargo.toml
        if: steps.get_cache.outputs.cache-hit == 'true'
        id: release_version
        run: |
          # Get version from Cargo.toml
          RELEASE_VERSION=$(cat ./Cargo.toml | grep '\[workspace.package\]' -A9999 | grep -m 1 'version = ' | tr -d " " | tr -d '"' | tr -d "'" | cut -d = -f 2)
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION"

      - name: Create binary release
        uses: ncipollo/release-action@v1
        with:
          body: "See Commits"
          allowUpdates: true
          commit: ${{ github.ref }}
          name: ${{ steps.release_version.outputs.RELEASE_VERSION }} Build ${{ github.run_number }}
          tag: ${{ steps.release_version.outputs.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy
    needs: [binary_build]
    uses: sdr-enthusiasts/common-github-workflows/.github/workflows/build_and_push_image.yml@main
    with:
      push_enabled: true
      push_destinations: ghcr.io
      ghcr_repo_owner: ${{ github.repository_owner }}
      ghcr_repo: ${{ github.repository }}
      build_with_tmpfs: true
      # ====
      # Temporarily changed:
      # get_version_method: cargo_toml_file_in_repo:file=/Cargo.toml
      # ...to...
      build_latest: false
      build_version_specific: true
      get_version_method: file_in_container:file=/IMAGE_VERSION
      # This has been done to facilitate testing of the rust release
      # See also the project's Dockerfile:38 for where /IMAGE_VERSION is created.
      # ====
      build_nohealthcheck: false
      cache_enabled: true
      cache_path: bin/
      cache_key: ${{ github.run_id }}
    secrets:
      ghcr_token: ${{ secrets.GITHUB_TOKEN }}
