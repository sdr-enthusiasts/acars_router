#!/usr/bin/env python3

import socket
import argparse
import logging
import time
import json
from pprint import pprint
import sys
import zmq

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="View ACARS/VDLM2 frames received via TCP/ZMQ")

    parser.add_argument(
        '--host',
        nargs='?',
        default="127.0.0.1",
        type=str,
        help="Hostname (default: 127.0.0.1)",
    )

    parser.add_argument(
        '--port',
        nargs='?',
        default=15550,
        type=str,
        help="Port (default: 15550)",
    )

    parser.add_argument(
        '--protocol',
        nargs='?',
        default="tcp",
        type=str,
        choices=["tcp", "zmq"],
        help="Protocol (default: tcp)",
    )

    parser.add_argument(
        '--pretty',
        action='store_true',
        default=False,
    )

    args = parser.parse_args()

    host = args.host
    port = args.port
    proto = args.protocol

    # configure logging: base logger
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [%(levelname)s] [%(name)s] %(message)s')
    logger = logging.getLogger(f'input.{proto}.{host}:{port}')
    logger.setLevel(logging.DEBUG)

    if proto == "tcp":

        # loop until the session is disconnected
        while True:

            # prepare socket
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:

                # set up socket
                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

                # attempt connection
                logger.debug("attempting to connect")

                # set socket connect timeout
                sock.settimeout(1)

                # attempt to connect
                try:
                    sock.connect((host, port))
                except Exception as e:
                    logger.error(f"connection error: {e}")
                    time.sleep(1)

                # if connected with no exception
                else:
                    logger.info("connection established")
                    sock.settimeout(1)

                    # while connected
                    while True:

                        # try to receive data
                        try:
                            data = sock.recv(16384)

                        except socket.timeout:
                            continue

                        except Exception as e:
                            logger.error(f"error receiving data: {e}")

                        # if data received with no exception
                        else:

                            # if we received something
                            if data:

                                # initially, we attempt to decode the whole message
                                decode_to_char = len(data)

                                # counter to prevent getting stuck in an infinite loop (shouldn't happen as everything is in try/except, but just to be sure)
                                decode_attempts = 0

                                # while there is data left to decode:
                                while len(data) > 0:

                                    # attempt to deserialise
                                    try:
                                        deserialised_json = json.loads(data[:decode_to_char])

                                    # if there is extra data, attempt to decode as much as we can next iteration of loop
                                    except json.decoder.JSONDecodeError as e:
                                        decode_to_char = e.pos

                                    # if an exception, log and continue
                                    except Exception as e:
                                        logger.error(f"invalid JSON received: {data}, exception: {e}")
                                        break

                                    # if there was no exception:
                                    else:

                                        # ensure json.loads resulted in a dict
                                        if type(deserialised_json) != dict:
                                            logger.debug(f"invalid JSON received: json.loads on raw_json returned non-dict object: {data}")

                                        # if it is a dict...
                                        else:

                                            # print json
                                            if args.pretty:
                                                pprint(deserialised_json)
                                            else:
                                                print(json.dumps(
                                                    deserialised_json,
                                                    separators=(',', ':'),
                                                    sort_keys=True,
                                                ))

                                            # remove the json we've already serialised from the input
                                            data = data[decode_to_char:]
                                            decode_to_char = len(data)

                                    # ensure we're not stuck in an infinite loop (unlikely there'd be 100 parts of json in a message. I've only ever seen up to 2.)
                                    if decode_attempts > 100:
                                        logger.error(f"infinite loop deserialising: {data}")
                                        break
                                    else:
                                        decode_attempts += 1

                            # if we received nothing, then "connection lost"
                            else:
                                logger.info("connection lost")

                                # close the socket
                                sock.close()

                                # sleep for a second (slow down reconnection attempts)
                                time.sleep(1)

                                # break out of inner loop, so reconnection can happen
                                break

    elif proto == "zmq":

        # Prepare zmq context and sockets
        context = zmq.Context()

        # This program is a SUBscripber. dumpvdl2 is a PUBlisher.
        subscriber = context.socket(zmq.SUB)

        # Connect to dumpvdl2 zmq server
        subscriber.connect(f"tcp://{host}:{port}")

        # Subscribe for everything
        subscriber.setsockopt(zmq.SUBSCRIBE, b'')

        # Receive messages forever
        while True:

            # Receive all parts of a zmq message
            message = subscriber.recv_multipart()

            # For each json message inside the zmq message
            for data in message:

                # deserialise json
                deserialised_json = json.loads(data)
                
                # print json
                if args.pretty:
                    pprint(deserialised_json)
                else:
                    print(json.dumps(
                        deserialised_json,
                        separators=(',', ':'),
                        sort_keys=True,
                    ))

    else:

        logger.critical(f"Unsupported protocol: {proto}")
        sys.exit(1)
